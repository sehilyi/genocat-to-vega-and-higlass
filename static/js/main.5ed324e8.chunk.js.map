{"version":3,"sources":["examples.js","App.js","serviceWorker.js","index.js"],"names":["examples","title","url","note","id","im","hg","Biodalliance","vg","testVegaSpec","Juiceboxjs","hgOptionsBase","bounded","pixelPreciseMarginPadding","containerPaddingX","containerPaddingY","sizeMode","App","useEffect","forEach","e","vegaEmbed","style","padding","map","x","example","className","href","display","width","src","alt","options","viewConfig","renderExamples","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0nzCAyBeA,EArBS,CACpB,CACIC,MAAO,eACPC,IAAK,4CACLC,KAAM,yKACNC,GAAI,eACJC,GAAI,4BACJC,GAAIC,EACJC,GAAIC,GAER,CACIR,MAAO,aACPC,IAAK,6CACLC,KAAM,GACNC,GAAI,aACJC,GAAI,0BACJC,GAAII,EACJF,GAAIC,ICdNE,EAAgB,CAClBC,SAAS,EACTC,2BAA2B,EAC3BC,kBAAmB,EACnBC,kBAAmB,EACnBC,SAAU,WAyCCC,MAtCf,WA8BI,OA5BAC,qBAAU,WACNlB,EAASmB,SAAQ,SAAAC,GACbC,YAAU,IAAD,OAAKD,EAAEhB,IAAMgB,EAAEZ,SAE7B,IAyBC,yBAAKc,MAAO,CAACC,QAAS,SAClB,oFACCvB,EAASwB,KAAI,SAAAC,GAAC,OAzBvB,SAAwBC,GAAU,IACtBzB,EAAiCyB,EAAjCzB,MAAOC,EAA0BwB,EAA1BxB,IAAKC,EAAqBuB,EAArBvB,KAAMC,EAAesB,EAAftB,GAAIC,EAAWqB,EAAXrB,GAAIC,EAAOoB,EAAPpB,GAClC,OACI,6BACI,wBAAIqB,UAAU,SAAQ,uBAAGC,KAAM1B,GAAMD,IACrC,yBAAK0B,UAAU,QACVxB,GAEL,yBAAKmB,MAAO,CAACO,QAAS,QAASC,MAAO,SAClC,yBAAKH,UAAU,OAAOI,IAAK1B,EAAI2B,IAAI,KACnC,yBAAKL,UAAU,QACX,kBAAC,mBAAD,CACIM,QAAStB,EACTuB,WAAY5B,KAGpB,yBAAKqB,UAAU,OAAOvB,GAAIA,MASf+B,CAAeV,QCpC1BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ed324e8.chunk.js","sourcesContent":["import Biodalliance from './higlass/biodalliance.json';\nimport Juiceboxjs from './higlass/juiceboxjs.json';\nimport testVegaSpec from './vega/test.json';\n\nexport const examples = [\n    {\n        title: \"Biodalliance\",\n        url: \"http://genocat.tools/tools/dalliance.html\",\n        note: \"Genome browser-like views are well-supported in HiGlass. In Vega, the stacked layout is supported using `concat` functions, but gene annotation plot is not supported.\",\n        id: \"Biodalliance\",\n        im: \"./images/Biodalliance.png\",\n        hg: Biodalliance,\n        vg: testVegaSpec\n    },\n    {\n        title: \"Juiceboxjs\",\n        url: \"http://genocat.tools/tools/juiceboxjs.html\",\n        note: \"\",\n        id: \"Juiceboxjs\",\n        im: \"./images/juiceboxjs.jpg\",\n        hg: Juiceboxjs,\n        vg: testVegaSpec\n    }\n]\n\nexport default examples;","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { HiGlassComponent } from 'higlass';\nimport vegaEmbed from 'vega-embed';\nimport examples from \"./examples.js\"\n\nconst hgOptionsBase = {\n    bounded: true,\n    pixelPreciseMarginPadding: true,\n    containerPaddingX: 0,\n    containerPaddingY: 0,\n    sizeMode: 'default'\n};\n\nfunction App() {\n\n    useEffect(() => {\n        examples.forEach(e => {\n            vegaEmbed(`#${e.id}`, e.vg);\n        });\n    }, []);\n\n    function renderExamples(example) {\n        const { title, url, note, id, im, hg } = example;\n        return (\n            <div>\n                <h2 className=\"title\"><a href={url}>{title}</a></h2>\n                <div className=\"note\">\n                    {note}\n                </div>\n                <div style={{display: \"table\", width: \"100%\"}}>\n                    <img className=\"cell\" src={im} alt=\"\"/>\n                    <div className=\"cell\">\n                        <HiGlassComponent\n                            options={hgOptionsBase}\n                            viewConfig={hg}\n                        />\n                    </div>\n                    <div className=\"cell\" id={id}></div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div style={{padding: \"20px\"}}>\n            <h1>GenoCat Examples with Related HiGlass and Vega Views</h1>\n            {examples.map(x => renderExamples(x))}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}